generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Users {
  id String @id @default(uuid())
  username String @db.VarChar(100) @unique
  password String @db.VarChar(100)
  role Role @default(user)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  pemagang Pemagangs?
  mentor Mentors?
  @@map("users")
}

model Pemagangs {
  id String @id @default(uuid())
  user_id String @unique
  divisi_id String
  name String @db.VarChar(100)
  place_origin String @db.VarChar(100)
  gender Gender
  start_at DateTime @db.DateTime()
  end_at DateTime @db.DateTime()
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  

  presences Presences[]
  dailyReports DailyReports[]
  weeklyReports WeeklyReports[]
  notifications Notifications[]
  divisi Divisions @relation(fields: [divisi_id], references: [id])
  user Users @relation(fields: [user_id], references: [id])
  @@map("pemagangs")
}

model Mentors {
  id String @id @default(uuid())
  user_id String @unique
  name String @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user Users @relation(fields: [user_id], references: [id])
  @@map("mentors")
}

model Divisions {
  id String @id @default(uuid())
  name String @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  pemagang Pemagangs[]

  @@map("divisions")
}

model Presences {
  id String @id @default(uuid())
  status Status?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  pemagang_id String

  pemagang Pemagangs @relation(fields: [pemagang_id], references: [id])
  @@map("presences")
}


model Notifications {
  id String @id @default(uuid())
  pemagang_id String
  message String @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  pemagang Pemagangs @relation(fields: [pemagang_id], references: [id])
  @@map("notifications")
}

model DailyReports {
  id String @id @default(uuid())
  pemagang_id String
  date DateTime @db.DateTime()
  activity String @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  pemagang Pemagangs @relation(fields: [pemagang_id], references: [id])
  @@map("daily_reports")
}

model WeeklyReports {
  id String @id @default(uuid())
  pemagang_id String
  status Statuses?
  start_date DateTime @db.DateTime()
  end_date DateTime @db.DateTime()
  week String @db.VarChar(100)
  activity String @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  pemagang Pemagangs @relation(fields: [pemagang_id], references: [id])
  @@map("weekly_reports")
}

model Menu {
  id String @id @default(uuid())
  name String @db.VarChar(255)
  role Role @default(user)
  slug String @db.VarChar(100)
  icon String @db.VarChar(100)
  url String @db.VarChar(100)
  order Int
  is_active Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("menus")
}

enum Status {
  Hadir
  Sakit
  Ijin
}

enum Statuses {
  Review
  Revision
  Approval
}

enum Role {
  admin
  user
}

enum Gender {
  lakilaki
  perempuan
}